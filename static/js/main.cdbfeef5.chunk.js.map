{"version":3,"sources":["components/button/button.componennt.jsx","components/button2/button.componennt2.jsx","components/input/input.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["BUTTON","params","class","id","download","type","onClick","text","BUTTON2","INPUT","onChange","for","toast","configure","App","imgRef","useRef","ctxRef","className","src","ref","alt","current","img","canvas","width","height","ctx","getContext","drawImage","imgData","getImageData","i","data","length","count","color","putImageData","style","display","document","getElementById","image","toDataURL","replace","removeAttribute","setAttribute","e","file","target","files","reader","FileReader","undefined","readAsArrayBuffer","onloadend","evt","bytes","Uint8Array","result","blob","Blob","buffer","c","clearRect","beginPath","clear","readAsDataURL","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4RAEe,SAASA,EAAOC,GAC7B,OACE,qBAAKC,MAAM,YAAX,SACE,mBAAGC,GAAG,WAAWC,SAAS,eAA1B,SACE,wBACEF,MAAM,SACNC,GAAG,UACHE,KAAK,SACLC,QAASL,EAAOK,QAJlB,SAMGL,EAAOM,W,MCVH,SAASC,EAAQP,GAC9B,OACE,qBAAKC,MAAM,YAAX,SACE,wBAAQA,MAAM,SAASI,QAASL,EAAOK,QAAvC,SACGL,EAAOM,S,MCJD,SAASE,EAAMR,GAC5B,OACE,sBAAKC,MAAM,YAAX,UACE,uBAAOG,KAAK,OAAOF,GAAG,OAAOD,MAAM,OAAOQ,SAAUT,EAAOS,WAC3D,uBAAOC,IAAI,OAAOT,MAAM,SAAxB,4B,iBCKNU,IAAMC,YA0GSC,MAxGf,WACE,IAAMC,EAASC,mBACTC,EAASD,mBAuFf,OACE,sBAAKE,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,qBAAKC,IAAI,GAAGC,IAAKL,EAAQM,IAAI,KAC7B,wBAAQlB,GAAG,WAAWiB,IAAKH,OAE7B,sBAAKC,UAAU,SAAf,UACE,cAACV,EAAD,CAASD,KAAK,oBAAoBD,QA7CZ,WAE1B,GAAIS,EAAOO,QAAS,CAClB,IAAMC,EAAMR,EAAOO,QACbE,EAASP,EAAOK,QAEtB,GAAkB,IAAdC,EAAIE,QACND,EAAOC,MAAQF,EAAIE,MACnBD,EAAOE,OAASH,EAAIG,OAEhBF,EAAOC,MAAQ,GAAKD,EAAOE,OAAS,GAAG,CACzC,IAAMC,EAAMH,EAAOI,WAAW,MAE9BD,EAAIE,UAAUN,EAAK,EAAG,GAGtB,IAFA,IAAMO,EAAUH,EAAII,aAAa,EAAG,EAAGP,EAAOC,MAAOD,EAAOE,QAEnDM,EAAI,EAAGA,EAAIF,EAAQG,KAAKC,OAAQF,GAAK,EAAG,CAC/C,IAAIG,EACFL,EAAQG,KAAKD,GAAKF,EAAQG,KAAKD,EAAI,GAAKF,EAAQG,KAAKD,EAAI,GACvDI,EAAQ,EACRD,EAAQ,IAAKC,EAAQ,IAChBD,EAAQ,MAAKC,EAAQ,OAE9BN,EAAQG,KAAKD,GAAKI,EAClBN,EAAQG,KAAKD,EAAI,GAAKI,EACtBN,EAAQG,KAAKD,EAAI,GAAKI,EACtBN,EAAQG,KAAKD,EAAI,GAAK,IAGxBL,EAAIU,aAAaP,EAAS,EAAG,GAC7Bb,EAAOK,QAAQgB,MAAMC,QAAU,QAC/BhB,EAAIe,MAAMC,QAAU,OACpBhB,EAAIJ,IAAM,QAcZ,cAACnB,EAAD,CAAQO,KAAK,iBAAiBD,QAhEd,WAEpB,IAAIF,EAAWoC,SAASC,eAAe,YACnCC,EAAQF,SACTC,eAAe,YACfE,UAAU,aACVC,QAAQ,YAAa,sBAEgC,KAAtDJ,SAASC,eAAe,YAAYH,MAAMC,SACY,SAAtDC,SAASC,eAAe,YAAYH,MAAMC,SAE1C3B,YAAM,0DACNR,EAASyC,gBAAgB,SAGzBzC,EAAS0C,aAAa,OAAQJ,MAkD5B,cAACjC,EAAD,CAAOC,SAvFQ,SAACqC,GAEpB,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAS,IAAIC,WACnB,QAAaC,IAATL,EAAoB,CACTG,EAAOG,kBAAkBN,GAEtCG,EAAOI,UAAY,SAACC,GAClB,IAAMC,EAAQ,IAAIC,WAAWF,EAAIP,OAAOU,QAClCC,EAAO,IAAIC,KAAK,CAACJ,EAAMK,SAE7BX,EAAOI,UAAY,SAACR,GAClBhC,EAAOO,QAAQgB,MAAMC,QAAU,QAC/BtB,EAAOK,QAAQgB,MAAMC,QAAU,OApBzB,WACZ,IAAIwB,EAAIvB,SAASC,eAAe,YAC5Bd,EAAMoC,EAAEnC,WAAW,MACvBD,EAAIqC,UAAU,EAAG,EAAGD,EAAEtC,MAAOsC,EAAErC,QAC/BC,EAAIsC,YAiBEC,GACAnD,EAAOO,QAAQH,IAAM4B,EAAEE,OAAOU,QAEhCR,EAAOgB,cAAcP,eC7BdQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASC,eAAe,SAM1B2B,M","file":"static/js/main.cdbfeef5.chunk.js","sourcesContent":["import \"./button.style.scss\";\r\n\r\nexport default function BUTTON(params) {\r\n  return (\r\n    <div class=\"container\">\r\n      <a id=\"download\" download=\"triangle.png\">\r\n        <button\r\n          class=\"button\"\r\n          id=\"button2\"\r\n          type=\"button\"\r\n          onClick={params.onClick}\r\n        >\r\n          {params.text}\r\n        </button>\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import \"./button.style.scss\";\r\n\r\nexport default function BUTTON2(params) {\r\n  return (\r\n    <div class=\"container\">\r\n      <button class=\"button\" onClick={params.onClick}>\r\n        {params.text}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import \"./input.style.scss\";\r\n\r\nexport default function INPUT(params) {\r\n  return (\r\n    <div class=\"container\">\r\n      <input type=\"file\" id=\"file\" class=\"file\" onChange={params.onChange} />\r\n      <label for=\"file\" class=\"button\">\r\n        Select file\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.scss\";\nimport BUTTON from \"./components/button/button.componennt\";\nimport BUTTON2 from \"./components/button2/button.componennt2\";\nimport INPUT from \"./components/input/input.component\";\nimport { useRef } from \"react\";\nimport { toast } from \"react-toastify\";\n// Import toastify css file\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// toast-configuration method,\n// it is compulsory method.\ntoast.configure();\n\nfunction App() {\n  const imgRef = useRef();\n  const ctxRef = useRef();\n\n  const clear = () => {\n    var c = document.getElementById(\"myCanvas\");\n    var ctx = c.getContext(\"2d\");\n    ctx.clearRect(0, 0, c.width, c.height);\n    ctx.beginPath();\n  };\n\n  const handleChange = (e) => {\n    debugger;\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    if (file !== undefined) {\n      const data = reader.readAsArrayBuffer(file);\n\n      reader.onloadend = (evt) => {\n        const bytes = new Uint8Array(evt.target.result);\n        const blob = new Blob([bytes.buffer]);\n\n        reader.onloadend = (e) => {\n          imgRef.current.style.display = \"block\";\n          ctxRef.current.style.display = \"none\";\n          clear();\n          imgRef.current.src = e.target.result;\n        };\n        reader.readAsDataURL(blob);\n      };\n    }\n  };\n\n  const downloadImage = () => {\n    debugger;\n    var download = document.getElementById(\"download\");\n    var image = document\n      .getElementById(\"myCanvas\")\n      .toDataURL(\"image/png\")\n      .replace(\"image/png\", \"image/octet-stream\");\n    if (\n      document.getElementById(\"myCanvas\").style.display === \"\" ||\n      document.getElementById(\"myCanvas\").style.display === \"none\"\n    ) {\n      toast(\"Please add your image and click on 'Create gray image'\");\n      download.removeAttribute(\"href\");\n    } else {\n      debugger;\n      download.setAttribute(\"href\", image);\n    }\n  };\n  const createBlackAndWhite = () => {\n    debugger;\n    if (imgRef.current) {\n      const img = imgRef.current;\n      const canvas = ctxRef.current;\n\n      if (img.width !== 0) {\n        canvas.width = img.width;\n        canvas.height = img.height;\n\n        if (canvas.width > 0 && canvas.height > 0) {\n          const ctx = canvas.getContext(\"2d\");\n\n          ctx.drawImage(img, 0, 0);\n          const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n          for (let i = 0; i < imgData.data.length; i += 4) {\n            let count =\n              imgData.data[i] + imgData.data[i + 1] + imgData.data[i + 2];\n            let color = 0;\n            if (count > 510) color = 255;\n            else if (count > 255) color = 127.5;\n\n            imgData.data[i] = color;\n            imgData.data[i + 1] = color;\n            imgData.data[i + 2] = color;\n            imgData.data[i + 3] = 255;\n          }\n\n          ctx.putImageData(imgData, 0, 0);\n          ctxRef.current.style.display = \"block\";\n          img.style.display = \"none\";\n          img.src = \"\";\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"row\">\n      <div className=\"column\">\n        <img src=\"\" ref={imgRef} alt=\"\" />\n        <canvas id=\"myCanvas\" ref={ctxRef} />\n      </div>\n      <div className=\"column\">\n        <BUTTON2 text=\"Create gray image\" onClick={createBlackAndWhite} />\n        <BUTTON text=\"Download image\" onClick={downloadImage} />\n        <INPUT onChange={handleChange} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}